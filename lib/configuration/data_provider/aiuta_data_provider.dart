import 'package:aiuta_flutter/configuration/listeners/aiuta_data_listeners.dart';
import 'package:aiuta_flutter/models/images/aiuta_history_image.dart';
import 'package:aiuta_flutter/src/utils/null_utils.dart';
import 'package:flutter/foundation.dart';
import 'package:json_annotation/json_annotation.dart';

part 'aiuta_data_provider.g.dart';

/// Data provider to manage data of the Aiuta SDK.
///
/// This allows you to store and retrieve data (such as user consent, uploaded images, generation history) from your own data source.
/// If not provided, the Aiuta SDK uses the built-in data provider that stores data in local storage on the device.
/// Default data storage is not linked to the user and is not shared between different devices. Will be deleted when the app is uninstalled.
/// Creating a custom data provider allows you to store data in your own data source and link it to the user.
@JsonSerializable()
class AiutaDataProvider {
  @JsonKey(name: "isUserConsentObtained", includeToJson: true)
  bool _isUserConsentObtained;

  /// Indicates whether the user has given consent to use the Aiuta SDK.
  ///
  /// If the user has not given consent, the Aiuta SDK will start with the onboarding flow ending with the consent screen.
  /// Otherwise, the Aiuta SDK will start with the main screen where the user can select the photo to start virtual try-on.
  @JsonKey(
      name: "isUserConsentObtainedListenable",
      toJson: toNull,
      fromJson: toNull,
      includeIfNull: false,
      includeToJson: false)
  final ValueListenable<bool> isUserConsentObtained;

  @JsonKey(name: "uploadedImages", includeToJson: true)
  List<AiutaUploadedImage>? _uploadedImages;

  /// List of images uploaded by the user.
  ///
  /// This list is used to show the user the history of uploaded images and allow the user to select an image to start virtual try-on.
  /// Images are displayed in the order as-is, without any sorting.
  @JsonKey(
      name: "uploadedImagesListenable",
      toJson: toNull,
      fromJson: toNull,
      includeIfNull: false,
      includeToJson: false)
  final ValueListenable<List<AiutaUploadedImage>> uploadedImages;

  @JsonKey(name: "generatedImages", includeToJson: true)
  List<AiutaGeneratedImage>? _generatedImages;

  /// List of images generated by the Aiuta.
  /// Images are displayed in the order as-is, without any sorting.
  @JsonKey(
      name: "generatedImagesListenable",
      toJson: toNull,
      fromJson: toNull,
      includeIfNull: false,
      includeToJson: false)
  final ValueListenable<List<AiutaGeneratedImage>> generatedImages;

  /// Listeners for various data events in the Aiuta SDK.
  ///
  /// This allows you to listen to data events such as user consent change, image upload, image generation, etc.
  /// You can use this to update your data source when the data in the Aiuta SDK changes.
  /// For example, you can update your data source when the user uploads an image or when the user gives consent to use the Aiuta SDK.
  /// You can also use this to update the UI when the data in the Aiuta SDK changes.
  @JsonKey(toJson: toNull, fromJson: toNull, includeIfNull: false)
  final AiutaDataListeners listeners;

  /// Create a new instance of AiutaDataProvider.
  AiutaDataProvider({
    required this.isUserConsentObtained,
    required this.uploadedImages,
    required this.generatedImages,
    required this.listeners,
  })  : _isUserConsentObtained = isUserConsentObtained.value,
        _uploadedImages = uploadedImages.value,
        _generatedImages = generatedImages.value {
    isUserConsentObtained.addListener(() {
      _isUserConsentObtained = isUserConsentObtained.value;
    });
    uploadedImages.addListener(() {
      _uploadedImages = uploadedImages.value;
    });
    generatedImages.addListener(() {
      _generatedImages = generatedImages.value;
    });
  }

  // Json staff
  /// Create a new instance of AiutaDataProvider from a json map.
  factory AiutaDataProvider.fromJson(Map<String, dynamic> json) =>
      _$AiutaDataProviderFromJson(json);

  /// Convert this object to a json map.
  Map<String, dynamic> toJson() => _$AiutaDataProviderToJson(this);
}
